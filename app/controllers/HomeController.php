<?php

File::requireOnce(app_path().'/helpers/VirusTotalApiV2.php');

class HomeController extends BaseController {

	private function getFilePath($file)
	{
		return $_ENV['MALWARE_STORAGE_PATH'] . $file->md5;
	}

	private function setVTScannedStatus(&$file, $code)
	{
		switch ($code) {
			case -3:
				$file->is_vtscanned = "API limit exceeded";
				break;
			case -2:
				$file->is_vtscanned = "Being scanned";
				break;
			case -1:
				$file->is_vtscanned = "Error occured";
				break;
			case 1:
				$file->is_vtscanned = "Scanned";
				break;
			case 0:
			default:
				$file->is_vtscanned = "No result";
				break;
		}
	}

	private function forceScanFileOnVirusTotal(&$file)
	{
		$api = new VirusTotalAPIV2($_ENV['VT_API_KEY']);	
		$report = $api->scanFile($this->getFilePath($file));

		if (isset($report->response_code)) {
			$this->setVTScannedStatus($file, $report->response_code);
		}
		
		if (isset($report->permalink)){
			$file->vtlink = $report->permalink;		
		}
	}

	private function scanFileOnVirusTotal(&$file, $forceScanFile = false)
	{
		if(!isset($file->vtscore))
			$file->vtscore = 0;
		if(!isset($file->vtlink))
			$file->vtlink = "";
		if(!isset($file->vendor))
			$file->vendor = "";
		if(!isset($file->is_vtscanned))
			$this->setVTScannedStatus($file, 0);
		
		$api = new VirusTotalAPIV2($_ENV['VT_API_KEY']);
		$report = $api->getFileReport($file->md5);

		if (isset($report->response_code))
		{
			if ($report->response_code == -3){
				//API limit exceeded. Retry later.
				$this->setVTScannedStatus($file, $report->response_code);
			}		
			else if ($report->response_code == -2 && isset($report->permalink)){
				//Being scanned; Keep the permalink to check later
				$this->setVTScannedStatus($file, $report->response_code);
				$file->vtlink = $report->permalink;
			}
			else if ($report->response_code == -1){
				//Error occured
				$this->setVTScannedStatus($file, $report->response_code);
			}
			else if ($report->response_code == 0){
				//No results; upload the file
				if($forceScanFile) {
					$this->forceScanFileOnVirusTotal($file);
				}
			}
			else if ($report->response_code == 1 && isset($report->permalink)){			
				//Results
				$file->vtscore = $report->positives;
				$file->vtlink = $report->permalink;
				$this->setVTScannedStatus($file, $report->response_code);

				if (isset($report->scans)){
					if (isset($report->scans->Microsoft) && !empty($report->scans->Microsoft->result)) 				$file->vendor = $report->scans->Microsoft->result;
					else if (isset($report->scans->Kaspersky) && !empty($report->scans->Kaspersky->result)) 		$file->vendor = $report->scans->Kaspersky->result;				
					else if (isset($report->scans->BitDefender) && !empty($report->scans->BitDefender->result)) 	$file->vendor = $report->scans->BitDefender->result;
					else if (isset($report->scans->Malwarebytes) && !empty($report->scans->Malwarebytes->result)) 	$file->vendor = $report->scans->Malwarebytes->result;
				}
			}
		}
	}

	private function human_filesize($bytes, $decimals = 2) {
		$size = array('B','kB','MB','GB','TB','PB','EB','ZB','YB');
		$factor = floor((strlen($bytes) - 1) / 3);
		return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . @$size[$factor];
	}

	private function getUrlTitle($url){
		try {
			$str = file_get_contents($url);
			if(strlen($str) > 0){
				preg_match("/\<title\>(.*)\<\/title\>/",$str,$title);
				return $title[1];
			}
		}catch(Exception $e) {
			return "Title is undefined :(";	
		}
	}

	public function tags()
	{
		try {
			$input = Input::get('tag');
			$tag = Tag::where('tag', $input)->firstOrFail();
			return View::make('template.sample')->with('files', $tag->samples);
		}catch(Exception $e) {
			Log::info($e);
			return Response::json(404);
		}		
	}

	public function search()
	{
		$md5 = ""; $filename = ""; $vendor = ""; $tag = "";
		if(null != Input::get('tag')) 		$tag = Input::get('tag');	
		if(null != Input::get('md5')) 		$md5 = Input::get('md5');
		if(null != Input::get('filename')) 	$filename = Input::get('filename');
		if(null != Input::get('vendor')) 	$vendor = Input::get('vendor');

		if($tag == "") $samples = Sample::where('md5' , 'LIKE', '%'. $md5. '%')
							->where('vendor', 'LIKE', '%' . $vendor. '%')
							->where('filename', 'LIKE', '%'. $filename . '%')
							->with('tags')
							->with('writeups')
							->get();
		else 
			$samples = Sample::whereHas('tags', function($q) use ($tag) {
								$q->where('tag', 'LIKE', '%'. $tag. '%');
						  })->where('md5' , 'LIKE', '%'. $md5. '%')
							->where('vendor', 'LIKE', '%' . $vendor. '%')
							->where('filename', 'LIKE', '%'. $filename . '%')
							->with('tags')
							->with('writeups')
							->get();
							
		return View::make('template.sample')->with('files', $samples);
	}

	public function delete()
	{
		try{
			$md5 = Input::get('md5');
			$sample = Sample::where('md5', $md5)->firstOrFail();
			$sample->tags()->detach();
			File::delete($this->getFilePath($sample));
			$sample->delete();
			return Response::json('Success');
		}catch(Exception $e) {
			return Response::json('Error');
		}
	}

	public function rescan()
	{
		try {
			$md5 = Input::get('md5');
			$sample = Sample::where('md5', $md5)->firstOrFail();
			$this->scanFileOnVirusTotal($sample);
			$sample->save();
			return Response::json(array('VTSCANNED' => $sample->is_vtscanned,
										'VENDOR'  => $sample->vendor,
										'VTLINK'  => $sample->vtlink,
										'VTSCORE' => $sample->vtscore));
		}catch(Exception $e) {
			return Response::json('Error');
		}

	}

	public function download($md5)
	{
		try {
			$sample = Sample::where('md5', $md5)->firstOrFail();
			return Response::download($this->getFilePath($sample), $sample->filename . ".bin");
		}catch(Exception $e) {
			return Response::json(404);
		}
	}

	public function homepage()
	{
		$samples = Sample::all();
		foreach ($samples as $sample) {
			$sample->filesize = $this->human_filesize($sample->filesize);
		}
		
		$this->layout->content = View::make('index')->with('files', $samples);
	}

	public function upload()
	{
		if (!file_exists($_ENV['MALWARE_STORAGE_PATH'])) {
			mkdir($_ENV['MALWARE_STORAGE_PATH'], 0777, true);
		}

		$input = Input::all();
		$files = Input::file();

		foreach ($files as $file) {
			try{
				$filename = md5_file($file);
			
				$sample = Sample::firstOrNew(array('md5' => $filename));

				$sample->filename = $file->getClientOriginalName();
				$sample->filesize = $file->getSize();

				$file->move($_ENV['MALWARE_STORAGE_PATH'], $filename);

				if(isset($input['VTscan']))
					$this->scanFileOnVirusTotal($sample, TRUE);
				else
					$this->scanFileOnVirusTotal($sample, FALSE);

				$sample->save();

				// tags processing
				$tag_name_str = 'tag_'. preg_replace('/[. ]/', "_", $sample->filename);
				if(isset($input[$tag_name_str])) {
					$tags = trim ( $input[$tag_name_str] );
					if ($tags != "") {
						$tags = explode ( ";", $tags );
						$tagIds = array ();
						// Tags
						foreach ( $tags as $tag ) {
							$tag = Tag::firstOrCreate ( array (
									'tag' => $tag 
							) );
							$tagIds [] = $tag->id;
						}
						// Sample <=> Tags
						$sample->tags ()->sync ( $tagIds );
					}
				}

				// writeups processing
				$writeup_name_str = 'writeup_' . preg_replace('/[. ]/', "_", $sample->filename);
				if(isset($input[$writeup_name_str])) {
					$writeups = $input[$writeup_name_str];
					foreach ($writeups as $url) {
						if($url == "") continue;
						$writeup = new Writeup;
						$writeup->url = $url;
						$writeup->title = $this->getUrlTitle($url);
						$writeup->sample()->associate($sample);
						$writeup->save();
					}
				}

				$samples[] = $sample;
				
			} catch(Exception $e) {
				Log::info($e);
				Response::json("Error occured :( Try to upload again");
			}			
		}

		return $sample;
	}

	public function getSuggestedTags() {
		$keyword = Input::get ( 'keyword' );
		$tags = Tag::select ( 'id', 'tag' )->orderBy ( 'tag', 'asc' )->where ( 'tag', 'LIKE', '%' . $keyword . '%' )->get ();
		return Response::json ( array (
				'tags' => $tags 
		) );
	}
}
